name: Checks

on: [push, pull_request]

jobs:
  license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check license headers
        run: ./.github/checks/copyright.sh
  sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Safety checks
        run: ./.github/checks/safety.sh -a
  unused-deps:
    runs-on: ubuntu-latest
    steps:
      - name: Install deps
        run: sudo snap install remarshal
      - name: Install deps
        run: sudo snap install --classic ripgrep
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Check for unused dependencies
        run: ./.github/checks/deps.sh .
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions-rs/toolchain@v1
        with:
          # this should pick up the rust-toolchain file
          profile: minimal
          components: rustfmt
      - name: Check Formating
        run: cargo fmt --all -- --check
  clippy-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: extract cpuid flags
        id: extract-cpuid-flags
        run: echo "flags=$(grep '^flags' /proc/cpuinfo | head -n1)" >> $GITHUB_OUTPUT
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{steps.extract-cpuid-flags.outputs.flags }}
      - name: Install deps
        run: sudo apt-get -qy update && sudo apt-get install -y libssl-dev libssl1.1
      - uses: actions-rs/toolchain@v1
        with:
          # this should pick up the rust-toolchain file
          profile: minimal
          components: clippy
      # investigating a SIGILL when building our lalrpop grammar
      - name: check CPU
        run: cat /proc/cpuinfo
      - name: Check workflow permissions
        id: check_permissions
        uses: scherermichael-oss/action-has-permission@1.0.6
        with:
          required-permission: write
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run clippy action to produce annotations
        uses: actions-rs/clippy-check@v1
        if: ${{ steps.check_permissions.outputs.has-permission }}
        with:
          args: --all
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run clippy manually without annotations
        if: ${{ !steps.check_permissions.outputs.has-permission }}
        run: cargo clippy --all
